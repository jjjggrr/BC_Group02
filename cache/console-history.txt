console.log(`New owner of token ${tokenIdToMint}: ${currentOwner}`); // Should be account2.address
currentOwner = await assetNFT.ownerOf(tokenIdToMint);
// Verify new owner
console.log(`Token ${tokenIdToMint} transferred.`);
await txTransfer.wait();
const txTransfer = await assetNFT.connect(account1).safeTransferFrom(account1.address, account2.address, tokenIdToMint);
console.log(`Transferring token ${tokenIdToMint} from ${account1.address} to ${account2.address}...`);
console.log(`Owner of token ${tokenIdToMint}: ${currentOwner}`); // Should be account1.address
let currentOwner = await assetNFT.ownerOf(tokenIdToMint);
// Verify owner
console.log(`Asset ${tokenIdToMint} registered.`);
await txRegister.wait();
const txRegister = await assetRegistry.connect(deployer).registerNewAsset(account1.address, "Ferrari, VIN:123, Red");
console.log(`Registering asset (token ID ${tokenIdToMint}) to ${account1.address}...`);
const tokenIdToMint = 0;
console.log("AssetNFT attached to:", await assetNFT.getAddress());
console.log("AssetRegistry attached to:", await assetRegistry.getAddress());
console.log("Account2 address:", account2.address);
console.log("Account1 address:", account1.address);
console.log("Deployer address:", deployer.address);
const assetNFT = AssetNFT.attach(assetNFTActualAddress);
const assetRegistry = AssetRegistry.attach(assetRegistryAddress);
// Attach to deployed instances
const AssetNFT = await ethers.getContractFactory("AssetNFT");
const AssetRegistry = await ethers.getContractFactory("AssetRegistry");
// Get contract factories
const assetNFTActualAddress = "0xd8058efe0198ae9dD7D563e1b4938Dcbc86A1F81";
const assetRegistryAddress = "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9";
const verifierOracleAddress = "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0";
const multiSigWalletAddress = "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512";
// Get deployed contract addresses from your output
const [deployer, account1, account2] = await ethers.getSigners();
// Get signers (wallets)